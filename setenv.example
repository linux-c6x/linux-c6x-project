# This file should be sourced (not run) into your shell to put the linux-c6x project in context
# example:
# /home/user/my-prj/linux-c6x-project$ source setenv

# Stuff that will often change from machine to machine
export LINUX_C6X_TOP_DIR=@TOP_DIR@
export TI_CG6X_DIR=$LINUX_C6X_TOP_DIR/cg6x
export GNU_TOOLS_DIR=$LINUX_C6X_TOP_DIR/c6x-4.5

# Choose kernels to build
# This is a space-separated list of kernels to build. The names used are
# used to include a kbuilds/<name>.mk makefile fragment from the top-level
# Makefile.
#
# any or all of the below can be included
# export KERNELS_TO_BUILD="dsk6455 evmc6472 evmc6474 evmc6457 evmc6474-lite"
#
export KERNELS_TO_BUILD="evmc6472"

# set to yes to build kernels with GCC
# leave blank for kernel builds with TI tools
export BUILD_KERNEL_WITH_GCC=yes

# set to yes to build userspace components with GCC
# leave blank for userspace builds with TI tools
export BUILD_USERSPACE_WITH_GCC=yes

# This is a space-separated list of kernels to build after everything else has built
# This is for variants of the main kernels. Variants which have minor differences in
# config or commandline compared to a kernel in KENRELS_TO_BUILD. This is used to 
# test initramfs built into the kernel, for example.
#
# See bootblob for easier was to change the command line and to use an external initramfs
#
# export EXTRA_KERNELS_TO_BUILD="dsk6455-initramfs dsk6455-romfs evmc6472-initramfs evmc6472-romfs"

# Choices for config

export ROOTFS=min-root

# 'little' or 'big' for single endianess. Leave blank or undefined to build
# both endians
export ENDIAN=little


# These should not normaly have to be modified
# Values are calculated from setenv values or constant
export PRODUCT_DIR=$LINUX_C6X_TOP_DIR/product
export SDK0_DIR=$LINUX_C6X_TOP_DIR/sdk0
export SDK_DIR=$LINUX_C6X_TOP_DIR/sdk
export LINUX_C6X_PROJECT_DIR=$LINUX_C6X_TOP_DIR/linux-c6x-project
export LINUX_C6X_KERNEL_DIR=$LINUX_C6X_TOP_DIR/linux-c6x
export SHELL=/bin/bash 
export ABI=elf
export DSBT_SIZE=64


# If you are building sdk0 you must use a 3.x gcc version
# Otherwise 3.x and 4.x should work
#export HOSTCC=gcc-3.4
export HOSTCC=gcc

# If you need to override DEPMOD use something like below
# This is needed for older versions of depmod like on RHEL4 and big endian c6x
#export DEPMOD=/my/special/stuff/depmod

# project make file will manage the correct SDK choice for the right component.  
# Here we must set a default to use for makes outside of the top level make
export CROSS_COMPILE=$SDK_DIR/bin/c6x-linux-
export CROSS=$CROSS_COMPILE

# project make file will manage the correct setting for ARCH
# Here we set it for direct builds of the kernel
export ARCH=c6x 

# SysLink target platform for build
export SYSLINK_PLATFORM=C6474
#export SYSLINK_PLATFORM=C6472

# SysLink install directory
export SYSLINK_ROOT=$LINUX_C6X_TOP_DIR/syslink_02_00_00_56_c6x_alpha2

# IPC package install directory
export IPC_DIR=$LINUX_C6X_TOP_DIR/ipc_1_22_00_19
