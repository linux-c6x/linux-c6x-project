######################### TOP LEVEL Makefile for SysLink ########################

# SysLink kernel samples to build
SYSLINK_KERNEL_SAMPLES_TO_BUILD ?= notify gateMP heapBufMP heapMemMP listMP messageQ sharedRegion
# SysLink user land samples to build
SYSLINK_USER_SAMPLES_TO_BUILD ?= common procMgr $(SYSLINK_KERNEL_SAMPLES_TO_BUILD)
STRIP_CGT = $(TI_CG6X_DIR)/bin/strip6x

KDIR=$(LINUX_C6X_TOP_DIR)/Build/kobjs/${SYSLINK_TO_BUILD}${ENDIAN_SUFFIX}
SYSLINK_INSTALL=syslink_${SYSLINK_TO_BUILD}${ENDIAN_SUFFIX}
ifeq ($(SYSLINK_TO_BUILD),evmc6472)
# SysLink build platform
SYSLINK_PLATFORM=C6472
# IPC build platform
IPC_PLATFORM=evm6472
ifeq ($(ENDIAN),little)
IPC_TARGET=C64P_COFF
else
IPC_TARGET=C64P_COFF_big_endian
endif
else
ifeq ($(SYSLINK_TO_BUILD),evmc6474)
SYSLINK_PLATFORM=C6474
IPC_PLATFORM=evm6474
ifeq ($(ENDIAN),little)
IPC_TARGET=C64P_COFF
else
IPC_TARGET=C64P_COFF_big_endian
endif
else
ifeq ($(SYSLINK_TO_BUILD),evmc6474-lite)
SYSLINK_PLATFORM=C6474
IPC_PLATFORM=evm6474
ifeq ($(ENDIAN),little)
IPC_TARGET=C64P_COFF
else
IPC_TARGET=C64P_COFF_big_endian
endif
else
ifeq ($(SYSLINK_TO_BUILD),evmc6678)
SYSLINK_PLATFORM=C667X
SYSLINK_VARIANT=C6678
IPC_PLATFORM=evm6678
ifeq ($(ENDIAN),little)
IPC_TARGET=C66_ELF
else
IPC_TARGET=C66_ELF_big_endian
endif
else
ifeq ($(SYSLINK_TO_BUILD),evmc6670)
SYSLINK_PLATFORM=C667X
SYSLINK_VARIANT=C6670
IPC_PLATFORM=evm6670
ifeq ($(ENDIAN),little)
IPC_TARGET=C66_ELF
else
IPC_TARGET=C66_ELF_big_endian
endif
endif
endif
endif
endif
endif


syslink-help:
	@echo "First edit and source setenv for SysLink variables"
	@echo
	@echo "Following SysLink targets available:-"
	@echo "syslink-kernel - for building syslink and sample kernel modules"
	@echo "syslink-user - for building syslink library and user land samples"
	@echo "syslink-all - build all targets"
	@echo "syslink-kernel-clean - clean kernel and sample modules"
	@echo "syslink-user-clean - clean user land and sample exe files"
	@echo "syslink-clean - clean all targets"
	@echo
	@echo "syslink files are installed under product/<platform>/"

syslink-kernel:
ifeq ($(SYSLINK_PLATFORM),)
	@echo "No SYSLINK_PLATFORM defined"; \
	false;
endif
	if [ ! -d $(SYSLINK_ROOT) ] ; then echo "Install SysLink before build"; false ; fi
	if [ ! -d $(IPC_DIR) ] ; then echo "Install IPC package before build"; false ; fi

	@if [ "$(BUILD_KERNEL_WITH_GCC)" == "yes" ] ; then \
		echo "building syslink kernel module using gcc"; \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		SYSLINK_VARIANT=$(SYSLINK_VARIANT) KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)); \
	else \
		echo "building syslink kernel module using cgt"; \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		TI_COMPILER="yes" KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)); \
	fi

# build all kernel sample modules
	for module_name in $(SYSLINK_KERNEL_SAMPLES_TO_BUILD) ; do \
		if [ "$(BUILD_KERNEL_WITH_GCC)" == "yes" ] ; then \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			SYSLINK_VARIANT=$(SYSLINK_VARIANT) KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		else \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			TI_COMPILER="yes" KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		fi \
	done;
	
syslink-user:
	if [ ! -d $(SYSLINK_ROOT) ] ; then echo "Install SysLink before build"; false ; fi
	if [ ! -d $(IPC_DIR) ] ; then echo "Install IPC package before build"; false ; fi

	@echo "building user syslink library"
	@if [ "$(BUILD_USERSPACE_WITH_GCC)" == "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		IPC_DIR=$(IPC_DIR) ENDIAN=$(ENDIAN)) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		TI_COMPILER="yes" IPC_DIR=$(IPC_DIR) ENDIAN=$(ENDIAN))  \
	fi

	for module_name in $(SYSLINK_USER_SAMPLES_TO_BUILD) ; do \
		if [ "$(BUILD_USERSPACE_WITH_GCC)" == "yes" ] ; then \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			IPC_DIR=$(IPC_DIR) ENDIAN=$(ENDIAN)) \
		else \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			TI_COMPILER="yes" IPC_DIR=$(IPC_DIR) ENDIAN=$(ENDIAN)) \
		fi \
	done	

syslink-rtos-ipc:
	(cd $(SYSLINK_ROOT)/ti/syslink/ipc; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all -PR . )
syslink-rtos-ipc_clean:
	(cd $(SYSLINK_ROOT)/ti/syslink/ipc; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc clean -PR . )
syslink-rtos-platform:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/platforms; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all -PR . )
syslink-rtos-platform_clean:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/platforms; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc clean -PR . )
syslink-rtos-notify:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/notify; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all )
syslink-rtos-notify_clean:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/notify; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc clean )
syslink-rtos-messageq:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/messageQ; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all )
syslink-rtos-messageq_clean:
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/messageQ; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc clean )

syslink-rtos-demo:syslink-rtos-ipc syslink-rtos-platform syslink-rtos-notify syslink-rtos-messageq 

syslink-rtos:
	(cd $(SYSLINK_ROOT); IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld" -PR . )

syslink-rtos-clean:
	(cd $(SYSLINK_ROOT); IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc clean XDCBUILDCFG="${SYSLINK_ROOT}/config.bld" -PR . ;)

syslink-rtos-install:
	[ -d $(PRODUCT_DIR) ] || echo "no product directory"
	[ -d $(PRODUCT_DIR)/$(SYSLINK_INSTALL) ] || mkdir -p $(PRODUCT_DIR)/$(SYSLINK_INSTALL)
	mkdir -p $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/map
	if [ "$(IPC_TARGET)" == "C64P_COFF" ] ; then \
		(cd $(SYSLINK_ROOT); cp `find . -name *x64P` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/; \
		 cp `find . -name  *x64.map` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/map; ) \
	fi
	if [ "$(IPC_TARGET)" == "C64P_COFF_big_endian" ]; then \
		(cd $(SYSLINK_ROOT); cp `find . -name *x64Pe` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/; \
		 cp `find . -name  *x64Pe.map` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/map; ) \
	fi
	if [ "$(IPC_TARGET)" == "C66_ELF" ]; then \
		(cd $(SYSLINK_ROOT); cp `find . -name *xe66` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/; \
		 cp `find . -name  *xe66.map` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/map; ) \
	fi
	if [ "$(IPC_TARGET)" == "C66_ELF_big_endian" ]; then \
		(cd $(SYSLINK_ROOT); cp `find . -name *xe66e` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/; \
		 cp `find . -name  *xe66.map` $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/map; ) \
	fi
	
syslink-demo-all: syslink-kernel syslink-user syslink-rtos-demo syslink-install syslink-rtos-install

syslink-all:syslink-kernel syslink-user syslink-rtos syslink-install syslink-rtos-install

syslink-install:
	[ -d $(PRODUCT_DIR) ] || echo "no product directory"
	[ -d $(PRODUCT_DIR)/$(SYSLINK_INSTALL) ] || mkdir -p $(PRODUCT_DIR)/$(SYSLINK_INSTALL)
	echo "Installing user land sample exe files"
	cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)/samples/*_debug $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/
	cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)/samples/*_release $(PRODUCT_DIR)/$(SYSLINK_INSTALL)/
	@echo "Installing kernel and sample modules $(SYSLINK_PLATFORM)"
	if [ "$(SYSLINK_PLATFORM)" == "C667X" ]; then \
		cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_VARIANT)/syslink.ko \
		 	$(PRODUCT_DIR)/$(SYSLINK_INSTALL)/ ; \
		cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_VARIANT)/samples/*.ko \
		 	$(PRODUCT_DIR)/$(SYSLINK_INSTALL)/ ; \
	else \
		cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)/syslink.ko \
		 	$(PRODUCT_DIR)/$(SYSLINK_INSTALL)/ ; \
		cp -f $(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)/samples/*.ko \
		 	$(PRODUCT_DIR)/$(SYSLINK_INSTALL)/ ; \
	fi


syslink-kernel-clean:

	@if [ "$(BUILD_KERNEL_WITH_GCC)" == "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) cleanall) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) cleanall) \
	fi
	for module_name in $(SYSLINK_KERNEL_SAMPLES_TO_BUILD) ; do \
		echo cleaning $$module_name; \
		if [ "$(BUILD_KERNEL_WITH_GCC)" == "yes" ] ; then \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) cleanall) \
		else \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) cleanall) \
		fi \
	done

syslink-user-clean:

	@echo "cleaning user syslink library"
	@if [ "$(BUILD_USERSPACE_WITH_GCC)" == "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		IPC_DIR=$(IPC_DIR) cleanall) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		IPC_DIR=$(IPC_DIR) cleanall) \
	fi

	for module_name in $(SYSLINK_USER_SAMPLES_TO_BUILD) ; do \
		echo cleaning $$module_name; \
		if [ "$(BUILD_USERSPACE_WITH_GCC)" == "yes" ] ; then \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			IPC_DIR=$(IPC_DIR) cleanall) \
		else \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			IPC_DIR=$(IPC_DIR) cleanall) \
		fi \
	done	

syslink-clean:syslink-kernel-clean syslink-user-clean syslink-rtos-clean
