######################### TOP LEVEL Makefile for SysLink ########################

# SysLink build targets
ifeq ($(SYSLINK_PLATFORM),C6472)
SYSLINK_PLATFORM=C6472
KDIR=$(LINUX_C6X_TOP_DIR)/Build/kobjs/evmc6472.el
else
ifeq ($(SYSLINK_PLATFORM),C6474)
SYSLINK_PLATFORM=C6474
KDIR=$(LINUX_C6X_TOP_DIR)/Build/kobjs/evmc6474.el
endif
endif

syslink-help:
	@echo "First edit and source setenv for SysLink variables"
	@echo
	@echo "Following SysLink targets available:-"
	@echo "syslink-kernel - for building syslink and sample kernel modules"
	@echo "syslink-user - for building syslink library and user land samples"
	@echo "syslink-all - build all targets"
	@echo "syslink-kernel-clean - clean kernel and sample modules"
	@echo "syslink-user-clean - clean user land and sample exe files"
	@echo "syslink-clean - clean all targets"
	@echo
	@echo "syslink files are installed under product/<platform>/"

syslink-kernel:
ifeq ($(SYSLINK_PLATFORM),)
	@echo "No SYSLINK_PLATFORM defined"; \
	false;
endif
	if [ ! -d $(SYSLINK_ROOT) ] ; then echo "Install SysLink before build"; false ; fi
	if [ ! -d $(IPC_DIR) ] ; then echo "Install IPC package before build"; false ; fi

	@if [ "$(BUILD_KERNEL_WITH_GCC)" = "yes" ] ; then \
		echo "building syslink kernel module using gcc"; \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)); \
	else \
		echo "building syslink kernel module using cgt"; \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		TI_COMPILER="yes" KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)); \
	fi

# build all kernel sample modules
	for module_name in $(SYSLINK_KERNEL_SAMPLES_TO_BUILD) ; do \
		if [ "$(BUILD_KERNEL_WITH_GCC)" = "yes" ] ; then \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		else \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; \
			make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			TI_COMPILER="yes" KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		fi \
	done;
	
syslink-user:
	if [ ! -d $(SYSLINK_ROOT) ] ; then echo "Install SysLink before build"; false ; fi
	if [ ! -d $(IPC_DIR) ] ; then echo "Install IPC package before build"; false ; fi

	@echo "building user syslink library"
	@if [ "$(BUILD_USERSPACE_WITH_GCC)" = "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
	fi

	for module_name in $(SYSLINK_USER_SAMPLES_TO_BUILD) ; do \
		if [ "$(BUILD_USERSPACE_WITH_GCC)" = "yes" ] ; then \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		else \
			echo building $$module_name; \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			TI_COMPILER="yes" KDIR=$(KDIR) IPC_DIR=$(IPC_DIR)) \
		fi \
	done	

syslink-rtos:
	# must match with the patters in $SYSLINK_ROOT/config.bld
	(cd $(SYSLINK_ROOT); cp config.bld .config.bld.tmp; \
	sed -i -e 's,var rootDirPre = "/opt/TI/",var rootDirPre = "${TI_CG6X_DIR_ROOT}/",' .config.bld.tmp; \
	sed -i -e 's,C64P_COFF.rootDir = rootDirPre + "c6000_7.2.0B1",\
	C64P_COFF.rootDir = rootDirPre + "${TI_CG6X_DIR_NAME}",' .config.bld.tmp;)
	if [ "$(SYSLINK_PLATFORM)" = "C6472" ] ; then \
		(cd $(SYSLINK_ROOT); sed -i -e 's,"ti.syslink.samples.rtos.platforms.evm6474.core0"\,,,' .config.bld.tmp; \
		sed -i -e 's,"ti.syslink.samples.rtos.platforms.evm6474.core1"\,,,' .config.bld.tmp; \
		sed -i -e 's,//                "ti.syslink.samples.rtos.platforms.evm6472.core0",\
                "ti.syslink.samples.rtos.platforms.evm6472.core0",' .config.bld.tmp; \
		sed -i -e 's,//                "ti.syslink.samples.rtos.platforms.evm6472.core1",\
                "ti.syslink.samples.rtos.platforms.evm6472.core1",' .config.bld.tmp; \
		sed -i -e 's,//                "ti.syslink.samples.rtos.platforms.evm6472.core2",\
                "ti.syslink.samples.rtos.platforms.evm6472.core2",' .config.bld.tmp; \
		sed -i -e 's,//                "ti.syslink.samples.rtos.platforms.evm6472.core3",\
                "ti.syslink.samples.rtos.platforms.evm6472.core3",' .config.bld.tmp; \
		sed -i -e 's,//                "ti.syslink.samples.rtos.platforms.evm6472.core4",\
                "ti.syslink.samples.rtos.platforms.evm6472.core4",' .config.bld.tmp; )\
	fi
	(cd $(SYSLINK_ROOT); $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/.config.bld.tmp" -PR . )

syslink-rtos-clean:
	(cd $(SYSLINK_ROOT); $(XDC_DIR)/xdc clean XDCBUILDCFG="${SYSLINK_ROOT}/.config.bld.tmp" -PR . ; \
	rm -rf .config.bld.tmp; )
	rm -rf $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/*.x64P

syslink-rtos-install:
	[ -d $(PRODUCT_DIR) ] || echo "no product directory"
	[ -d $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM) ] || mkdir -p $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)
	if [ "$(SYSLINK_PLATFORM)" = "C6474" ] ; then \
		(cd $(SYSLINK_ROOT); cp `find . -name *c6474*x64P` $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/; ) \
	else \
		(cd $(SYSLINK_ROOT); cp `find . -name *c6472*x64P` $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/; ) \
	fi

syslink-all:syslink-kernel syslink-user syslink-rtos syslink-install syslink-rtos-install

syslink-install:
	[ -d $(PRODUCT_DIR) ] || echo "no product directory"
	[ -d $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM) ] || mkdir -p $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)
	@echo "Installing user land sample exe files"
	cp -f $(SYSLINK_ROOT)/ti/syslink/lib/samples/*.exe $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/
	@echo "Installing kernel and sample modules"
	cp -f $(SYSLINK_ROOT)/ti/syslink/lib/modules/$(SYSLINK_PLATFORM)/*.ko \
		 $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/

syslink-kernel-clean:

	@if [ "$(BUILD_KERNEL_WITH_GCC)" = "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux; \
		make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
	fi
	rm -rf $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/*.ko; \

syslink-user-clean:

	@echo "cleaning user syslink library"
	@if [ "$(BUILD_USERSPACE_WITH_GCC)" = "yes" ] ; then \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
	else \
		(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
	fi

	for module_name in $(SYSLINK_USER_SAMPLES_TO_BUILD) ; do \
		echo cleaning $$module_name; \
		if [ "$(BUILD_USERSPACE_WITH_GCC)" = "yes" ] ; then \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_GNU) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
		else \
			(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			KDIR=$(KDIR) IPC_DIR=$(IPC_DIR) clean) \
		fi \
	done	
	rm -rf $(PRODUCT_DIR)/syslink_$(SYSLINK_PLATFORM)/*.exe

syslink-clean:syslink-kernel-clean syslink-user-clean syslink-rtos-clean
