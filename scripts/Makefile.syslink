######################### TOP LEVEL Makefile for SysLink ########################

# SysLink kernel samples to build
SYSLINK_KERNEL_SAMPLES_TO_BUILD ?= notify gateMP heapBufMP heapMemMP listMP messageQ sharedRegion
# SysLink user land samples to build
SYSLINK_USER_SAMPLES_TO_BUILD ?= common procMgr $(SYSLINK_KERNEL_SAMPLES_TO_BUILD)
STRIP_CGT = $(TI_CG6X_DIR)/bin/strip6x

KDIR=$(LINUX_C6X_TOP_DIR)/Build/kobjs/$(KNAME)$(ENDIAN_SUFFIX)
SYSLINK_INSTALL=/opt/syslink_$(KNAME)$(FULL_SUFFIX)

C64_IPC_TARGET := C64P_COFF
C66_IPC_TARGET := C66_ELF

ifneq ($(IS_SYSLINK_BUILD),)
SYSLINK_TO_BUILD=$(KNAME)
endif

ifeq ($(SYSLINK_TO_BUILD),evmc6472)
SYSLINK_PLATFORM := C6472
IPC_PLATFORM := evm6472
IPC_TARGET := $(C64_IPC_TARGET)
endif

ifeq ($(SYSLINK_TO_BUILD),evmc6474)
SYSLINK_PLATFORM := C6474
IPC_PLATFORM := evm6474
IPC_TARGET := $(C64_IPC_TARGET)
endif

ifeq ($(SYSLINK_TO_BUILD),evmc6474-lite)
SYSLINK_PLATFORM := C6474
IPC_PLATFORM := evm6474
IPC_TARGET := $(C64_IPC_TARGET)
endif

ifeq ($(SYSLINK_TO_BUILD),evmc6678)
SYSLINK_PLATFORM := C667X
SYSLINK_VARIANT := C6678
IPC_PLATFORM := evm6678
IPC_TARGET := $(C66_IPC_TARGET)
endif

ifeq ($(SYSLINK_TO_BUILD),evmc6670)
SYSLINK_PLATFORM := C667X
SYSLINK_VARIANT := C6670
IPC_PLATFORM := evm6670
IPC_TARGET := $(C66_IPC_TARGET)
endif

ifneq ($(SYSLINK_TO_BUILD),)
ifeq  ($SYSLINK_PLATFORM),)
$(error unknown SYSLINK platfrom $(SYSLINK_TO_BUILD))
endif
endif

ifeq ($(ENDIAN),big)
IPC_TARGET := $(IPC_TARGET)_big_endian
endif

ifeq ($(IPC_TARGET),C64P_COFF)
RTOS_EXTENSION=x64P
endif

ifeq ($(IPC_TARGET),C64P_COFF_big_endian)
RTOS_EXTENSION=x64Pe
endif

ifeq ($(IPC_TARGET),C64P_ELF)
RTOS_EXTENSION=xe64P
endif

ifeq ($(IPC_TARGET),C64P_ELF_big_endian)
RTOS_EXTENSION=xe64Pe
endif

ifeq ($(IPC_TARGET),C66_ELF)
RTOS_EXTENSION=xe66
endif

ifeq ($(IPC_TARGET),C66_ELF_big_endian)
RTOS_EXTENSION=xe66e
endif

ifneq ($(SYSLINK_TO_BUILD),)
ifeq ($(RTOS_EXTENSION),)
$(error unknown IPC_TARGET=$(IPC_TARGET))
endif
endif

ifneq ($(SYSLINK_VARIANT),)
SYSLINK_KERNEL_RESULTS=$(SYSLINK_ENDIAN_ROOT)/ti/syslink/bin/$(SYSLINK_VARIANT)
else
SYSLINK_KERNEL_RESULTS=$(SYSLINK_ENDIAN_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)
endif

syslink-help:
	@echo "Following SysLink targets available:"
	@echo "syslink-demo      - build all targets needed for messageq and notify"
	@echo "syslink-all       - build all syslink targets"
	@echo "syslink-kernel    - for building syslink and sample kernel modules"
	@echo "syslink-user      - for building syslink library and user land samples"
	@echo "syslink-user      - for building syslink library and user land samples"
	@echo "syslink-rtos-demo - for building syslink library and user land samples"
	@echo "syslink-rtos-all  - for building syslink library and user land samples"
	@echo "syslink-rtos-ipc ... build individual parts for rtos"
	@echo
	@echo "syslink files are installed under product/<platform>/"

one-one-syslink-sanity:
ifeq ($(BUILD_SYSLINK),yes)
ifeq ($(SYSLINK_PLATFORM),)
	@echo "No SYSLINK_PLATFORM defined"
	false
endif
	@if [ -z "$(SYSLINK_SRC)" ]  || [ ! -d $(SYSLINK_SRC) ]  ; then echo "SysLink directory not found";       false ; fi
	@if [ -z "$(IPC_DIR)" ]      || [ ! -d $(IPC_DIR) ]      ; then echo "Setup IPC package before build";    false ; fi
	@if [ -z "$(BIOS_DIR)" ]     || [ ! -d $(BIOS_DIR) ]     ; then echo "Setup BIOS package before build";   false ; fi
	@if [ -z "$(XDC_DIR)" ]      || [ ! -d $(XDC_DIR) ]      ; then echo "Setup XDC package before build";    false ; fi
	@if [ -z "$(CGT_BIOS_DIR)" ] || [ ! -d $(CGT_BIOS_DIR) ] ; then echo "Setup CGT before build";            false ; fi
else
	@true
endif

ifeq ($(DEBUG_SYSLINK_VC),)

# this is the normal case
export SYSLINK_ROOT=$(BLD)/syslink_$(KNAME)$(FULL_SUFFIX)

# the install rules run in FULL context like user but need to access 
# the peices built by kernel and rtos that are not built for each float
export SYSLINK_ENDIAN_ROOT=$(BLD)/syslink_$(KNAME)$(ENDIAN_SUFFIX)

one-one-syslink-prep: one-one-syslink-sanity
	@echo "**** syslink-prep for $(KNAME) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT)"
	mkdir -p $(SYSLINK_ROOT)
	cp -a $(SYSLINK_SRC)/* $(SYSLINK_ROOT)/

else

# if syslink rebuilds too much, it may be that files are checked into git that should not be
# to solve this problem start with a clean checkout of syslink (no mods)
# set DEBUG_SYSLINK_VC=1 and build syslink-all for all platforms
# then make the target syslink-fix-vc, commit the change and retest

export SYSLINK_ROOT=$(SYSLINK_SRC)
export SYSLINK_ENDIAN_ROOT=$(SYSLINK_SRC)
one-one-syslink-prep: one-one-syslink-sanity

syslink-fix-vc:
	(cd $SYSLINK_SRC; git status | awk '{ /modified|deleted/ { print $3 }' | xargs git rm -f; git clean -fdx)

endif

one-one-syslink-kernel: one-one-syslink-prep
	+$(QUIET)echo "********** syslink-kernel for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/knl/Linux ;  \
		make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		SYSLINK_VARIANT=$(SYSLINK_VARIANT) KDIR=$(KDIR) IPC_DIR=$(IPC_PACKAGES_DIR))

	# build all kernel sample modules
	$(QUIET)for module_name in $(SYSLINK_KERNEL_SAMPLES_TO_BUILD) ; do \
		echo building $$module_name; \
		(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/knl/Linux; ls -l; \
			make ARCH=c6x CROSS_COMPILE=$(CC_SDK0) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			SYSLINK_VARIANT=$(SYSLINK_VARIANT) KDIR=$(KDIR) IPC_DIR=$(IPC_PACKAGES_DIR)) || exit 2;\
	done;
	
one-one-syslink-user: one-one-syslink-prep
	+$(QUIET)echo "********** syslink-user for $(KNAME) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT)"
	(cd $(SYSLINK_ROOT)/ti/syslink/utils/hlos/usr/Linux; \
		make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
		IPC_DIR=$(IPC_PACKAGES_DIR) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT) )
	$(QUIET)for module_name in $(SYSLINK_USER_SAMPLES_TO_BUILD) ; do \
		echo building $$module_name; \
		(cd $(SYSLINK_ROOT)/ti/syslink/samples/hlos/$$module_name/usr/Linux; \
			make TOOLCHAIN_PREFIX=$(CC_SDK) SYSLINK_PLATFORM=$(SYSLINK_PLATFORM) \
			IPC_DIR=$(IPC_PACKAGES_DIR) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT) ) || exit 2; \
	done	

one-one-syslink-rtos-ipc: one-one-syslink-prep
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT)/ti/syslink/ipc; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld" -PR . )

one-one-syslink-rtos-platform: one-one-syslink-prep
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/platforms; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld" -PR . )

one-one-syslink-rtos-notify: one-one-syslink-prep
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/notify; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld")

one-one-syslink-rtos-messageq: one-one-syslink-prep
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT)/ti/syslink/samples/rtos/messageQ; IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld")

one-one-syslink-rtos-all: one-one-syslink-prep
	+$(QUIET)echo "********** syslink-rtos-all for $(KNAME) ENDIAN=$(ENDIAN)"
	(cd $(SYSLINK_ROOT); IPC_PLATFORM=$(IPC_PLATFORM) IPC_TARGET=$(IPC_TARGET) $(XDC_DIR)/xdc all XDCBUILDCFG="${SYSLINK_ROOT}/config.bld" -PR . )


# the dir where we assemble the syslink filesystem image
SYSLINK_INSTALL_DIR 	= $(BLD)/rootfs-parts/syslink-$(SYSLINK_INSTALL_TYPE)-$(KNAME).$(ARCHe)$(ARCHfloat)

# the path within the filesystem where the files will appear
SYSLINK_INSTALL_PATH	= /opt/syslink_$(KNAME)$(ENDIAN_SUFFIX)

# the resulting full path
SYSLINK_INSTALL		= $(SYSLINK_INSTALL_DIR)/$(SYSLINK_INSTALL_PATH)

SYSLINK_USER_RESULTS=$(SYSLINK_ROOT)/ti/syslink/bin/$(SYSLINK_PLATFORM)
SYSLINK_RTOS_RESULTS=$(SYSLINK_ENDIAN_ROOT)/ti/syslink/samples/rtos

one-one-syslink-kernel-demo-install:
	mkdir -p $(SYSLINK_INSTALL)
	cp -f $(SYSLINK_KERNEL_RESULTS)/syslink.ko    			$(SYSLINK_INSTALL)/
	cp -f $(SYSLINK_KERNEL_RESULTS)/samples/{notify,messageq}app.ko	$(SYSLINK_INSTALL)/

one-one-syslink-kernel-all-install:
	mkdir -p $(SYSLINK_INSTALL)
	cp -f $(SYSLINK_KERNEL_RESULTS)/syslink.ko    			$(SYSLINK_INSTALL)/
	cp -f $(SYSLINK_KERNEL_RESULTS)/samples/*.ko  	$(SYSLINK_INSTALL)/

one-one-syslink-user-all-install:
	mkdir -p $(SYSLINK_INSTALL)
	cp -f $(SYSLINK_USER_RESULTS)/samples/*_debug 	$(SYSLINK_INSTALL)/
	cp -f $(SYSLINK_USER_RESULTS)/samples/*_release $(SYSLINK_INSTALL)/

one-one-syslink-user-demo-install:
	mkdir -p $(SYSLINK_INSTALL)
	cp -f $(SYSLINK_USER_RESULTS)/samples/{notify,messageq}app_release $(SYSLINK_INSTALL)/

one-one-syslink-rtos-all-install:
	mkdir -p $(SYSLINK_INSTALL)/map
	(cd $(SYSLINK_RTOS_RESULTS); cp `find . -name *$(RTOS_EXTENSION)`     $(SYSLINK_INSTALL)/)
	(cd $(SYSLINK_RTOS_RESULTS); cp `find . -name *$(RTOS_EXTENSION).map` $(SYSLINK_INSTALL)/map)
	
one-one-syslink-rtos-demo-install:
	mkdir -p $(SYSLINK_INSTALL)
	(cd $(SYSLINK_RTOS_RESULTS); cp `find . -name *.$(RTOS_EXTENSION)`     $(SYSLINK_INSTALL)/)
	$(STRIP_CGT) -p $(SYSLINK_INSTALL)/*.$(RTOS_EXTENSION)

one-one-syslink-tar:
	cd $(SYSLINK_INSTALL_DIR); tar czf $(PRODUCT_DIR)/syslink-$(SYSLINK_INSTALL_TYPE)-$(KNAME)$(ENDIAN_SUFFIX)$(ARCHfloat)$(BUILD_SUFFIX).tar.gz *

ifeq ($(KNAME),evmc6678)
SL_SC=8
endif

ifeq ($(KNAME),evmc6670)
SL_SC=4
endif

SL_SSRC=$(PRJ)/scripts/syslink
ifneq ($(SL_SC),)

one-one-syslink-script-demo-install:
	cp $(SL_SSRC)/{messageq,notify}_*_test_$(SL_SC)_core.sh 	  $(SYSLINK_INSTALL)
	cp $(SL_SSRC)/procmgr_load_{messageq,notify}app_$(SL_SC)_core.sh  $(SYSLINK_INSTALL)
	cp $(SL_SSRC)/*.txt  						  $(SYSLINK_INSTALL)

one-one-syslink-script-all-install:
	cp $(SL_SSRC)/*_test_$(SL_SC)_core.sh 		  		  $(SYSLINK_INSTALL)
	cp $(SL_SSRC)/procmgr_load_*app_$(SL_SC)_core.sh  		  $(SYSLINK_INSTALL)
	cp $(SL_SSRC)/*.txt  						  $(SYSLINK_INSTALL)

else # SL_SC is blank

one-one-syslink-script-demo-install:
	true

one-one-syslink-script-all-install:
	cp $(SL_SSRC)/syslink*c64x.sh	 		  		  $(SYSLINK_INSTALL)
	cp -a $(SL_SSRC)/configs $(SL_SSRC)/scripts $(SL_SSRC)/images	  $(SYSLINK_INSTALL)
	mkdir -p $(SYSLINK_INSTALL)/logs
	cp $(SL_SSRC)/*.txt  						  $(SYSLINK_INSTALL)

endif

one-one-syslink-demo:
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT)"
	rm -rf $(BLD)/rootfs-parts/syslink-demo-$(KNAME)$(FULL_SUFFIX)
	$(SUB_MAKE) SYSLINK_INSTALL_TYPE=demo one-one-syslink-kernel-demo-install \
		one-one-syslink-user-demo-install  one-one-syslink-rtos-demo-install \
		one-one-syslink-script-demo-install
	$(SUB_MAKE) SYSLINK_INSTALL_TYPE=demo one-one-syslink-tar

one-one-syslink-all:
	+$(QUIET)echo "********** $(subst one-one-,,$@) for $(KNAME) ENDIAN=$(ENDIAN) FLOAT=$(FLOAT)"
	rm -rf $(BLD)/rootfs-parts/syslink-demo-$(KNAME)$(FULL_SUFFIX)
	$(SUB_MAKE) SYSLINK_INSTALL_TYPE=all one-one-syslink-kernel-all-install \
		one-one-syslink-user-all-install  one-one-syslink-rtos-all-install \
		one-one-syslink-script-all-install
	$(SUB_MAKE) SYSLINK_INSTALL_TYPE=all one-one-syslink-tar
